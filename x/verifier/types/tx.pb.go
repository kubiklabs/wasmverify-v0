// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: verifier/verifier/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAggregateCodeHashPrevote struct {
	ApplicationId uint64 `protobuf:"varint,1,opt,name=ApplicationId,proto3" json:"ApplicationId,omitempty"`
	Operator      string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Validator     string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	Hash          string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MsgAggregateCodeHashPrevote) Reset()         { *m = MsgAggregateCodeHashPrevote{} }
func (m *MsgAggregateCodeHashPrevote) String() string { return proto.CompactTextString(m) }
func (*MsgAggregateCodeHashPrevote) ProtoMessage()    {}
func (*MsgAggregateCodeHashPrevote) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{0}
}
func (m *MsgAggregateCodeHashPrevote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAggregateCodeHashPrevote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAggregateCodeHashPrevote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAggregateCodeHashPrevote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAggregateCodeHashPrevote.Merge(m, src)
}
func (m *MsgAggregateCodeHashPrevote) XXX_Size() int {
	return m.Size()
}
func (m *MsgAggregateCodeHashPrevote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAggregateCodeHashPrevote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAggregateCodeHashPrevote proto.InternalMessageInfo

func (m *MsgAggregateCodeHashPrevote) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *MsgAggregateCodeHashPrevote) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgAggregateCodeHashPrevote) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgAggregateCodeHashPrevote) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type MsgAggregateCodeHashPrevoteResponse struct {
}

func (m *MsgAggregateCodeHashPrevoteResponse) Reset()         { *m = MsgAggregateCodeHashPrevoteResponse{} }
func (m *MsgAggregateCodeHashPrevoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAggregateCodeHashPrevoteResponse) ProtoMessage()    {}
func (*MsgAggregateCodeHashPrevoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{1}
}
func (m *MsgAggregateCodeHashPrevoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAggregateCodeHashPrevoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAggregateCodeHashPrevoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAggregateCodeHashPrevoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAggregateCodeHashPrevoteResponse.Merge(m, src)
}
func (m *MsgAggregateCodeHashPrevoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAggregateCodeHashPrevoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAggregateCodeHashPrevoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAggregateCodeHashPrevoteResponse proto.InternalMessageInfo

type MsgApplyVerifyApplication struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OffchainCodeUrl string `protobuf:"bytes,2,opt,name=offchainCodeUrl,proto3" json:"offchainCodeUrl,omitempty"`
}

func (m *MsgApplyVerifyApplication) Reset()         { *m = MsgApplyVerifyApplication{} }
func (m *MsgApplyVerifyApplication) String() string { return proto.CompactTextString(m) }
func (*MsgApplyVerifyApplication) ProtoMessage()    {}
func (*MsgApplyVerifyApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{2}
}
func (m *MsgApplyVerifyApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApplyVerifyApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApplyVerifyApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApplyVerifyApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApplyVerifyApplication.Merge(m, src)
}
func (m *MsgApplyVerifyApplication) XXX_Size() int {
	return m.Size()
}
func (m *MsgApplyVerifyApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApplyVerifyApplication.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApplyVerifyApplication proto.InternalMessageInfo

func (m *MsgApplyVerifyApplication) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgApplyVerifyApplication) GetOffchainCodeUrl() string {
	if m != nil {
		return m.OffchainCodeUrl
	}
	return ""
}

type MsgApplyVerifyApplicationResponse struct {
	ApplicationId uint64 `protobuf:"varint,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
}

func (m *MsgApplyVerifyApplicationResponse) Reset()         { *m = MsgApplyVerifyApplicationResponse{} }
func (m *MsgApplyVerifyApplicationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApplyVerifyApplicationResponse) ProtoMessage()    {}
func (*MsgApplyVerifyApplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{3}
}
func (m *MsgApplyVerifyApplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApplyVerifyApplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApplyVerifyApplicationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApplyVerifyApplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApplyVerifyApplicationResponse.Merge(m, src)
}
func (m *MsgApplyVerifyApplicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApplyVerifyApplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApplyVerifyApplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApplyVerifyApplicationResponse proto.InternalMessageInfo

func (m *MsgApplyVerifyApplicationResponse) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

type MsgUpdateBlockTime struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CompilationBlocks uint64 `protobuf:"varint,2,opt,name=compilationBlocks,proto3" json:"compilationBlocks,omitempty"`
	PrevoteBlocks     uint64 `protobuf:"varint,3,opt,name=prevoteBlocks,proto3" json:"prevoteBlocks,omitempty"`
	VoteBlocks        uint64 `protobuf:"varint,4,opt,name=voteBlocks,proto3" json:"voteBlocks,omitempty"`
}

func (m *MsgUpdateBlockTime) Reset()         { *m = MsgUpdateBlockTime{} }
func (m *MsgUpdateBlockTime) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBlockTime) ProtoMessage()    {}
func (*MsgUpdateBlockTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{4}
}
func (m *MsgUpdateBlockTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBlockTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBlockTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBlockTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBlockTime.Merge(m, src)
}
func (m *MsgUpdateBlockTime) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBlockTime) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBlockTime.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBlockTime proto.InternalMessageInfo

func (m *MsgUpdateBlockTime) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateBlockTime) GetCompilationBlocks() uint64 {
	if m != nil {
		return m.CompilationBlocks
	}
	return 0
}

func (m *MsgUpdateBlockTime) GetPrevoteBlocks() uint64 {
	if m != nil {
		return m.PrevoteBlocks
	}
	return 0
}

func (m *MsgUpdateBlockTime) GetVoteBlocks() uint64 {
	if m != nil {
		return m.VoteBlocks
	}
	return 0
}

type MsgUpdateBlockTimeResponse struct {
}

func (m *MsgUpdateBlockTimeResponse) Reset()         { *m = MsgUpdateBlockTimeResponse{} }
func (m *MsgUpdateBlockTimeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBlockTimeResponse) ProtoMessage()    {}
func (*MsgUpdateBlockTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{5}
}
func (m *MsgUpdateBlockTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBlockTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBlockTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBlockTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBlockTimeResponse.Merge(m, src)
}
func (m *MsgUpdateBlockTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBlockTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBlockTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBlockTimeResponse proto.InternalMessageInfo

type MsgAggregateCodeHashVote struct {
	ApplicationId uint64 `protobuf:"varint,1,opt,name=ApplicationId,proto3" json:"ApplicationId,omitempty"`
	Operator      string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Validator     string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	Salt          string `protobuf:"bytes,4,opt,name=salt,proto3" json:"salt,omitempty"`
	CodeHash      string `protobuf:"bytes,5,opt,name=codeHash,proto3" json:"codeHash,omitempty"`
}

func (m *MsgAggregateCodeHashVote) Reset()         { *m = MsgAggregateCodeHashVote{} }
func (m *MsgAggregateCodeHashVote) String() string { return proto.CompactTextString(m) }
func (*MsgAggregateCodeHashVote) ProtoMessage()    {}
func (*MsgAggregateCodeHashVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{6}
}
func (m *MsgAggregateCodeHashVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAggregateCodeHashVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAggregateCodeHashVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAggregateCodeHashVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAggregateCodeHashVote.Merge(m, src)
}
func (m *MsgAggregateCodeHashVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgAggregateCodeHashVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAggregateCodeHashVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAggregateCodeHashVote proto.InternalMessageInfo

func (m *MsgAggregateCodeHashVote) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *MsgAggregateCodeHashVote) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgAggregateCodeHashVote) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgAggregateCodeHashVote) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *MsgAggregateCodeHashVote) GetCodeHash() string {
	if m != nil {
		return m.CodeHash
	}
	return ""
}

type MsgAggregateCodeHashVoteResponse struct {
}

func (m *MsgAggregateCodeHashVoteResponse) Reset()         { *m = MsgAggregateCodeHashVoteResponse{} }
func (m *MsgAggregateCodeHashVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAggregateCodeHashVoteResponse) ProtoMessage()    {}
func (*MsgAggregateCodeHashVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{7}
}
func (m *MsgAggregateCodeHashVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAggregateCodeHashVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAggregateCodeHashVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAggregateCodeHashVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAggregateCodeHashVoteResponse.Merge(m, src)
}
func (m *MsgAggregateCodeHashVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAggregateCodeHashVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAggregateCodeHashVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAggregateCodeHashVoteResponse proto.InternalMessageInfo

type MsgFinalVerification struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ApplicationId uint64 `protobuf:"varint,2,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	CodeId        uint64 `protobuf:"varint,3,opt,name=codeId,proto3" json:"codeId,omitempty"`
}

func (m *MsgFinalVerification) Reset()         { *m = MsgFinalVerification{} }
func (m *MsgFinalVerification) String() string { return proto.CompactTextString(m) }
func (*MsgFinalVerification) ProtoMessage()    {}
func (*MsgFinalVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{8}
}
func (m *MsgFinalVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalVerification.Merge(m, src)
}
func (m *MsgFinalVerification) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalVerification.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalVerification proto.InternalMessageInfo

func (m *MsgFinalVerification) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFinalVerification) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *MsgFinalVerification) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

type MsgFinalVerificationResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *MsgFinalVerificationResponse) Reset()         { *m = MsgFinalVerificationResponse{} }
func (m *MsgFinalVerificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinalVerificationResponse) ProtoMessage()    {}
func (*MsgFinalVerificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f22dc36f3e4fff, []int{9}
}
func (m *MsgFinalVerificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalVerificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalVerificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalVerificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalVerificationResponse.Merge(m, src)
}
func (m *MsgFinalVerificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalVerificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalVerificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalVerificationResponse proto.InternalMessageInfo

func (m *MsgFinalVerificationResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgAggregateCodeHashPrevote)(nil), "verifier.verifier.MsgAggregateCodeHashPrevote")
	proto.RegisterType((*MsgAggregateCodeHashPrevoteResponse)(nil), "verifier.verifier.MsgAggregateCodeHashPrevoteResponse")
	proto.RegisterType((*MsgApplyVerifyApplication)(nil), "verifier.verifier.MsgApplyVerifyApplication")
	proto.RegisterType((*MsgApplyVerifyApplicationResponse)(nil), "verifier.verifier.MsgApplyVerifyApplicationResponse")
	proto.RegisterType((*MsgUpdateBlockTime)(nil), "verifier.verifier.MsgUpdateBlockTime")
	proto.RegisterType((*MsgUpdateBlockTimeResponse)(nil), "verifier.verifier.MsgUpdateBlockTimeResponse")
	proto.RegisterType((*MsgAggregateCodeHashVote)(nil), "verifier.verifier.MsgAggregateCodeHashVote")
	proto.RegisterType((*MsgAggregateCodeHashVoteResponse)(nil), "verifier.verifier.MsgAggregateCodeHashVoteResponse")
	proto.RegisterType((*MsgFinalVerification)(nil), "verifier.verifier.MsgFinalVerification")
	proto.RegisterType((*MsgFinalVerificationResponse)(nil), "verifier.verifier.MsgFinalVerificationResponse")
}

func init() { proto.RegisterFile("verifier/verifier/tx.proto", fileDescriptor_31f22dc36f3e4fff) }

var fileDescriptor_31f22dc36f3e4fff = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0xee, 0x6c, 0xe3, 0xba, 0xfb, 0x82, 0x2c, 0x1d, 0x74, 0xc9, 0xc6, 0x12, 0x6a, 0x74, 0xb1,
	0xe0, 0x9a, 0x05, 0x2b, 0x1e, 0xbc, 0xed, 0x0a, 0x62, 0x0f, 0x05, 0x29, 0xee, 0x1e, 0xbc, 0xc8,
	0x98, 0x4c, 0xd3, 0x60, 0x9a, 0x19, 0x66, 0x42, 0xd9, 0x82, 0x27, 0x7f, 0x81, 0xfe, 0x05, 0x8f,
	0xfe, 0x12, 0x8f, 0x7b, 0x14, 0xbc, 0x48, 0xfb, 0x47, 0x24, 0xd3, 0x64, 0x6c, 0x9b, 0xa4, 0xb6,
	0x97, 0xbd, 0xbd, 0x1f, 0x4f, 0xde, 0xe7, 0xc9, 0xfb, 0xc1, 0x80, 0x35, 0xa6, 0x22, 0x1c, 0x84,
	0x54, 0x9c, 0x6a, 0x23, 0xb9, 0x72, 0xb9, 0x60, 0x09, 0xc3, 0x8d, 0x3c, 0xe4, 0xe6, 0x86, 0xf3,
	0x0d, 0xc1, 0xfd, 0x9e, 0x0c, 0xce, 0x82, 0x40, 0xd0, 0x80, 0x24, 0xf4, 0x15, 0xf3, 0xe9, 0x1b,
	0x22, 0x87, 0x6f, 0x05, 0x1d, 0xb3, 0x84, 0xe2, 0x47, 0x70, 0xe7, 0x8c, 0xf3, 0x28, 0xf4, 0x48,
	0x12, 0xb2, 0xb8, 0xeb, 0x9b, 0xa8, 0x85, 0xda, 0x46, 0x7f, 0x39, 0x88, 0x2d, 0xd8, 0x63, 0x9c,
	0x0a, 0x92, 0x30, 0x61, 0xee, 0xb4, 0x50, 0x7b, 0xbf, 0xaf, 0x7d, 0xdc, 0x84, 0xfd, 0x31, 0x89,
	0x42, 0x5f, 0x25, 0xeb, 0x2a, 0xf9, 0x2f, 0x80, 0x31, 0x18, 0x43, 0x22, 0x87, 0xa6, 0xa1, 0x12,
	0xca, 0x76, 0x8e, 0xe1, 0xe1, 0x1a, 0x49, 0x7d, 0x2a, 0x39, 0x8b, 0x25, 0x75, 0x3e, 0xc0, 0x51,
	0x0a, 0xe3, 0x3c, 0x9a, 0x5c, 0xa6, 0xbf, 0x33, 0x59, 0xd0, 0x84, 0x4d, 0xb8, 0xed, 0x09, 0xaa,
	0x38, 0x91, 0x2a, 0x9d, 0xbb, 0xb8, 0x0d, 0x07, 0x6c, 0x30, 0xf0, 0x86, 0x24, 0x8c, 0xd3, 0xca,
	0x17, 0x22, 0xca, 0x24, 0xaf, 0x86, 0x9d, 0x2e, 0x3c, 0xa8, 0x24, 0xc8, 0x55, 0xa4, 0x0d, 0x22,
	0x65, 0x0d, 0x5a, 0x0a, 0x3a, 0xdf, 0x11, 0xe0, 0x9e, 0x0c, 0x2e, 0xb8, 0x4f, 0x12, 0x7a, 0x1e,
	0x31, 0xef, 0xd3, 0xbb, 0x70, 0x44, 0xd7, 0xa8, 0x3c, 0x81, 0x86, 0xc7, 0x46, 0x3c, 0x8c, 0x54,
	0x05, 0xf5, 0x85, 0x54, 0x3a, 0x8d, 0x7e, 0x31, 0x91, 0x8a, 0xe0, 0xf3, 0xee, 0x64, 0xc8, 0xfa,
	0x5c, 0xc4, 0x52, 0x10, 0xdb, 0x00, 0x0b, 0x10, 0x43, 0x41, 0x16, 0x22, 0x4e, 0x13, 0xac, 0xa2,
	0x46, 0xdd, 0xee, 0x1f, 0x08, 0xcc, 0xb2, 0xb1, 0x5c, 0xde, 0xd0, 0x9a, 0x48, 0x12, 0x25, 0xf9,
	0x9a, 0xa4, 0x76, 0x5a, 0xcd, 0xcb, 0x34, 0x98, 0xb7, 0xe6, 0xd5, 0x72, 0xdf, 0x71, 0xa0, 0x55,
	0xa5, 0x55, 0xff, 0x50, 0x0c, 0x77, 0x7b, 0x32, 0x78, 0x1d, 0xc6, 0x24, 0x52, 0xe3, 0xfd, 0xff,
	0xea, 0x14, 0x66, 0xbd, 0x53, 0x32, 0x6b, 0x7c, 0x08, 0xbb, 0xa9, 0x8e, 0xae, 0x9f, 0x4d, 0x21,
	0xf3, 0x9c, 0x97, 0xd0, 0x2c, 0xe3, 0xd3, 0x9b, 0x64, 0xc1, 0x9e, 0xc8, 0xec, 0x8c, 0x58, 0xfb,
	0xcf, 0x7e, 0x1b, 0x50, 0xef, 0xc9, 0x00, 0x7f, 0x41, 0x60, 0x56, 0xde, 0xaa, 0xeb, 0x16, 0xee,
	0xdb, 0x5d, 0x73, 0x48, 0xd6, 0x8b, 0xed, 0xf0, 0x5a, 0xe8, 0x67, 0x38, 0xac, 0xb8, 0xba, 0x93,
	0x8a, 0x8a, 0xa5, 0x68, 0xeb, 0xf9, 0x36, 0x68, 0xcd, 0x1e, 0xc0, 0xc1, 0xea, 0x19, 0x1d, 0x97,
	0x17, 0x5a, 0x81, 0x59, 0x4f, 0x37, 0x82, 0x69, 0xa2, 0x09, 0xdc, 0x2b, 0x5f, 0xf6, 0x27, 0x1b,
	0xf6, 0x2d, 0x05, 0x5b, 0x9d, 0x2d, 0xc0, 0x9a, 0x7a, 0x04, 0x8d, 0xe2, 0x5e, 0x3e, 0x2e, 0xaf,
	0x54, 0x00, 0x5a, 0xa7, 0x1b, 0x02, 0x73, 0xba, 0xf3, 0xce, 0xcf, 0xa9, 0x8d, 0xae, 0xa7, 0x36,
	0xfa, 0x33, 0xb5, 0xd1, 0xd7, 0x99, 0x5d, 0xbb, 0x9e, 0xd9, 0xb5, 0x5f, 0x33, 0xbb, 0xf6, 0xfe,
	0x48, 0x3f, 0x22, 0x57, 0x0b, 0xef, 0xc9, 0x84, 0x53, 0xf9, 0x71, 0x57, 0xbd, 0x29, 0x9d, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xbd, 0xbe, 0xe6, 0x71, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AggregateCodeHashPrevote(ctx context.Context, in *MsgAggregateCodeHashPrevote, opts ...grpc.CallOption) (*MsgAggregateCodeHashPrevoteResponse, error)
	ApplyVerifyApplication(ctx context.Context, in *MsgApplyVerifyApplication, opts ...grpc.CallOption) (*MsgApplyVerifyApplicationResponse, error)
	UpdateBlockTime(ctx context.Context, in *MsgUpdateBlockTime, opts ...grpc.CallOption) (*MsgUpdateBlockTimeResponse, error)
	AggregateCodeHashVote(ctx context.Context, in *MsgAggregateCodeHashVote, opts ...grpc.CallOption) (*MsgAggregateCodeHashVoteResponse, error)
	FinalVerification(ctx context.Context, in *MsgFinalVerification, opts ...grpc.CallOption) (*MsgFinalVerificationResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AggregateCodeHashPrevote(ctx context.Context, in *MsgAggregateCodeHashPrevote, opts ...grpc.CallOption) (*MsgAggregateCodeHashPrevoteResponse, error) {
	out := new(MsgAggregateCodeHashPrevoteResponse)
	err := c.cc.Invoke(ctx, "/verifier.verifier.Msg/AggregateCodeHashPrevote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApplyVerifyApplication(ctx context.Context, in *MsgApplyVerifyApplication, opts ...grpc.CallOption) (*MsgApplyVerifyApplicationResponse, error) {
	out := new(MsgApplyVerifyApplicationResponse)
	err := c.cc.Invoke(ctx, "/verifier.verifier.Msg/ApplyVerifyApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBlockTime(ctx context.Context, in *MsgUpdateBlockTime, opts ...grpc.CallOption) (*MsgUpdateBlockTimeResponse, error) {
	out := new(MsgUpdateBlockTimeResponse)
	err := c.cc.Invoke(ctx, "/verifier.verifier.Msg/UpdateBlockTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AggregateCodeHashVote(ctx context.Context, in *MsgAggregateCodeHashVote, opts ...grpc.CallOption) (*MsgAggregateCodeHashVoteResponse, error) {
	out := new(MsgAggregateCodeHashVoteResponse)
	err := c.cc.Invoke(ctx, "/verifier.verifier.Msg/AggregateCodeHashVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinalVerification(ctx context.Context, in *MsgFinalVerification, opts ...grpc.CallOption) (*MsgFinalVerificationResponse, error) {
	out := new(MsgFinalVerificationResponse)
	err := c.cc.Invoke(ctx, "/verifier.verifier.Msg/FinalVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AggregateCodeHashPrevote(context.Context, *MsgAggregateCodeHashPrevote) (*MsgAggregateCodeHashPrevoteResponse, error)
	ApplyVerifyApplication(context.Context, *MsgApplyVerifyApplication) (*MsgApplyVerifyApplicationResponse, error)
	UpdateBlockTime(context.Context, *MsgUpdateBlockTime) (*MsgUpdateBlockTimeResponse, error)
	AggregateCodeHashVote(context.Context, *MsgAggregateCodeHashVote) (*MsgAggregateCodeHashVoteResponse, error)
	FinalVerification(context.Context, *MsgFinalVerification) (*MsgFinalVerificationResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AggregateCodeHashPrevote(ctx context.Context, req *MsgAggregateCodeHashPrevote) (*MsgAggregateCodeHashPrevoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateCodeHashPrevote not implemented")
}
func (*UnimplementedMsgServer) ApplyVerifyApplication(ctx context.Context, req *MsgApplyVerifyApplication) (*MsgApplyVerifyApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyVerifyApplication not implemented")
}
func (*UnimplementedMsgServer) UpdateBlockTime(ctx context.Context, req *MsgUpdateBlockTime) (*MsgUpdateBlockTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlockTime not implemented")
}
func (*UnimplementedMsgServer) AggregateCodeHashVote(ctx context.Context, req *MsgAggregateCodeHashVote) (*MsgAggregateCodeHashVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateCodeHashVote not implemented")
}
func (*UnimplementedMsgServer) FinalVerification(ctx context.Context, req *MsgFinalVerification) (*MsgFinalVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalVerification not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AggregateCodeHashPrevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAggregateCodeHashPrevote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AggregateCodeHashPrevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verifier.verifier.Msg/AggregateCodeHashPrevote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AggregateCodeHashPrevote(ctx, req.(*MsgAggregateCodeHashPrevote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApplyVerifyApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApplyVerifyApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApplyVerifyApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verifier.verifier.Msg/ApplyVerifyApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApplyVerifyApplication(ctx, req.(*MsgApplyVerifyApplication))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBlockTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBlockTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBlockTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verifier.verifier.Msg/UpdateBlockTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBlockTime(ctx, req.(*MsgUpdateBlockTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AggregateCodeHashVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAggregateCodeHashVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AggregateCodeHashVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verifier.verifier.Msg/AggregateCodeHashVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AggregateCodeHashVote(ctx, req.(*MsgAggregateCodeHashVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinalVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalVerification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinalVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/verifier.verifier.Msg/FinalVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinalVerification(ctx, req.(*MsgFinalVerification))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "verifier.verifier.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggregateCodeHashPrevote",
			Handler:    _Msg_AggregateCodeHashPrevote_Handler,
		},
		{
			MethodName: "ApplyVerifyApplication",
			Handler:    _Msg_ApplyVerifyApplication_Handler,
		},
		{
			MethodName: "UpdateBlockTime",
			Handler:    _Msg_UpdateBlockTime_Handler,
		},
		{
			MethodName: "AggregateCodeHashVote",
			Handler:    _Msg_AggregateCodeHashVote_Handler,
		},
		{
			MethodName: "FinalVerification",
			Handler:    _Msg_FinalVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "verifier/verifier/tx.proto",
}

func (m *MsgAggregateCodeHashPrevote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAggregateCodeHashPrevote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAggregateCodeHashPrevote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApplicationId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ApplicationId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAggregateCodeHashPrevoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAggregateCodeHashPrevoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAggregateCodeHashPrevoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApplyVerifyApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApplyVerifyApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApplyVerifyApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OffchainCodeUrl) > 0 {
		i -= len(m.OffchainCodeUrl)
		copy(dAtA[i:], m.OffchainCodeUrl)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OffchainCodeUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApplyVerifyApplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApplyVerifyApplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApplyVerifyApplicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplicationId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ApplicationId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBlockTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBlockTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBlockTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteBlocks != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.PrevoteBlocks != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrevoteBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.CompilationBlocks != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CompilationBlocks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBlockTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBlockTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBlockTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAggregateCodeHashVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAggregateCodeHashVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAggregateCodeHashVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApplicationId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ApplicationId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAggregateCodeHashVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAggregateCodeHashVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAggregateCodeHashVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFinalVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x18
	}
	if m.ApplicationId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ApplicationId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinalVerificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalVerificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalVerificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAggregateCodeHashPrevote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplicationId != 0 {
		n += 1 + sovTx(uint64(m.ApplicationId))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAggregateCodeHashPrevoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApplyVerifyApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OffchainCodeUrl)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApplyVerifyApplicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplicationId != 0 {
		n += 1 + sovTx(uint64(m.ApplicationId))
	}
	return n
}

func (m *MsgUpdateBlockTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CompilationBlocks != 0 {
		n += 1 + sovTx(uint64(m.CompilationBlocks))
	}
	if m.PrevoteBlocks != 0 {
		n += 1 + sovTx(uint64(m.PrevoteBlocks))
	}
	if m.VoteBlocks != 0 {
		n += 1 + sovTx(uint64(m.VoteBlocks))
	}
	return n
}

func (m *MsgUpdateBlockTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAggregateCodeHashVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplicationId != 0 {
		n += 1 + sovTx(uint64(m.ApplicationId))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAggregateCodeHashVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFinalVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ApplicationId != 0 {
		n += 1 + sovTx(uint64(m.ApplicationId))
	}
	if m.CodeId != 0 {
		n += 1 + sovTx(uint64(m.CodeId))
	}
	return n
}

func (m *MsgFinalVerificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAggregateCodeHashPrevote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAggregateCodeHashPrevote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAggregateCodeHashPrevote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			m.ApplicationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAggregateCodeHashPrevoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAggregateCodeHashPrevoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAggregateCodeHashPrevoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApplyVerifyApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApplyVerifyApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApplyVerifyApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffchainCodeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffchainCodeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApplyVerifyApplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApplyVerifyApplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApplyVerifyApplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			m.ApplicationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBlockTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBlockTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBlockTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompilationBlocks", wireType)
			}
			m.CompilationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompilationBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevoteBlocks", wireType)
			}
			m.PrevoteBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevoteBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteBlocks", wireType)
			}
			m.VoteBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBlockTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBlockTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBlockTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAggregateCodeHashVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAggregateCodeHashVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAggregateCodeHashVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			m.ApplicationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAggregateCodeHashVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAggregateCodeHashVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAggregateCodeHashVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			m.ApplicationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalVerificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalVerificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalVerificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
