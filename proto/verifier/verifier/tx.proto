syntax = "proto3";

package verifier.verifier;

option go_package = "verifier/x/verifier/types";

// SEND PREVOTE HASH IN THIS FORMATE
// SHA256("{salt}:{codehash}:{voterAddress}")

// Msg defines the Msg service.
service Msg {
  rpc AggregateCodeHashPrevote (MsgAggregateCodeHashPrevote) returns (MsgAggregateCodeHashPrevoteResponse);
  rpc ApplyVerifyApplication   (MsgApplyVerifyApplication  ) returns (MsgApplyVerifyApplicationResponse  );
  rpc UpdateBlockTime          (MsgUpdateBlockTime         ) returns (MsgUpdateBlockTimeResponse         );
  rpc AggregateCodeHashVote    (MsgAggregateCodeHashVote   ) returns (MsgAggregateCodeHashVoteResponse   );
  rpc FinalVerification        (MsgFinalVerification       ) returns (MsgFinalVerificationResponse       );
}
message MsgAggregateCodeHashPrevote {
  uint64 ApplicationId = 1;
  string operator      = 2;
  string validator     = 3;
  string hash          = 4;
}

message MsgAggregateCodeHashPrevoteResponse {}

message MsgApplyVerifyApplication {
  string creator         = 1;
  string offchainCodeUrl = 2;
}

message MsgApplyVerifyApplicationResponse {
  uint64 applicationId = 1;
}

message MsgUpdateBlockTime {
  string creator           = 1;
  uint64 compilationBlocks = 2;
  uint64 prevoteBlocks     = 3;
  uint64 voteBlocks        = 4;
}

message MsgUpdateBlockTimeResponse {}

message MsgAggregateCodeHashVote {
  uint64 ApplicationId = 1;
  string operator      = 2;
  string validator     = 3;
  string salt          = 4;
  string codeHash      = 5;
}

message MsgAggregateCodeHashVoteResponse {}

message MsgFinalVerification {
  string creator       = 1;
  uint64 applicationId = 2;
  uint64 codeId        = 3;
}

message MsgFinalVerificationResponse {
  string response = 1;
}

